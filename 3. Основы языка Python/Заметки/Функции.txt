____________________
Определение функции
____________________

Фрагмент программного кода (подпрограмма), к которому можно
обратиться из другого места программы (Википедия).

● Функции обычно имеют имя.
● В Python можно создавать функции и без имени.

____________________________
Полезные встроенные функции
____________________________

● min, max - минимальное, максимальное значение
● round - округление числа
● abs - модуль числа
● sum - сумма элементов последовательности
● enumerate - нумерация последовательности

______________________
Параметры и результат
______________________

Функция состоит из 3 основных вещей - это ее название, параметры и результат.

Из ролика про функции (8:20), пример с функцией используемой для написания разделителя:
	● Простой разделитель - нет параметров, нет возврата.
	● Меняем знак разделителя - 1 параметр, нет возврата.
	● Меняем знак и длину - 2 параметра, нет возврата.
	● Как использовать разделитель в тексте вместо того, чтобы
	печатать его в консоль? 2 параметра и результат (возвращаемое
	значение).

__________________
Аргументы функции
__________________
Параметры функции
__________________

● def my_func(параметр1, параметр2, ...)
___________________
Передача параметров
___________________

● По порядку
● greeting(‘Leo’, ‘Hello’)
● По имени
● greeting(say=’Hello’, who=’Leo’)
______________________
Значения по умолчанию
______________________

● Можно указать у параметра значение по умолчанию.
● def greeting(who, say=’Hello’)
● Если мы не передадим параметр say при вызове greeting(‘Max’),
функция сработает со значением по умолчанию.

_____________
args, kwargs
_____________

● Иногда нужно реализовать передачу любого количества аргументов:
● def greeting(‘Hello’, ‘Leo’, ‘Max’, ‘Kate’, ...)
● args - передача любого количества по порядку - приходит кортеж из параметров.
● kwargs - передача любого количества по имени - приходит словарь из параметров.
_______________________
Локальные и глобальные
переменные
_______________________

● Глобальными называют объекты, объявление которых дано вне
функции. Они доступны (видимы) во всем файле, в котором
объявлены.
● Локальными называют объекты, объявление которых дано
внутри блока или функции. Эти объекты доступны только внутри
того блока, в котором объявлены.
_______
global
_______

● Для этого в функции нужно указать, что она глобальная.
● global my_var.
Этот механизм лучше не использовать. Мы рискуем, изменив
значение переменной в одной функции, получить неверное значение
в другой функции.
● При желании можно изменить глобальную переменную.
________________________
относительность области
видимости
________________________

Тогда мы рассматриваем область видимости относительно какойлибо функции:
В программе могут встречаться вложенные друг в друга функции.
● def a():
	○ def b():
		■ def c():
_________________
Передача функции
параметром,
lambda-функции
_________________

lambda-функции
● lambda входные параметры: результат
● применяются для создания анонимных функций по месту их
использования

____________________
sorted, filter, map
____________________

● применяются к последовательности
● имеют параметр - функцию
● позволяют создавать код быстро и удобно

sorted
● сортировка последовательности
● sorted(iterable, *, key=None, reverse=False)
● аргументы: последовательность, ключ для сортировки, порядок

filter
● фильтрация последовательности
● filter(function, iterable)
● аргументы: функция фильтрации, последовательность

map
● применение функции к каждому элементу последовательности
● map(func, iterable, ...)
● аргументы: функция, последовательность


