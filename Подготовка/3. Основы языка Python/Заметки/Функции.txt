___________________
Определение функции
____________________

Фрагмент программного кода (подпрограмма), к которому можно
обратиться из другого места программы (Википедия).

● Функции обычно имеют имя.
● В Python можно создавать функции и без имени.

____________________________
Полезные встроенные функции
____________________________

● min, max - минимальное, максимальное значение
● round - округление числа
● abs - модуль числа
● sum - сумма элементов последовательности
● enumerate - нумерация последовательности

______________________
Параметры и результат
______________________

Функция состоит из 3 основных вещей - это ее название, параметры и результат.

Из ролика про функции (8:20), пример с функцией используемой для написания разделителя:
	● Простой разделитель - нет параметров, нет возврата.
	● Меняем знак разделителя - 1 параметр, нет возврата.
	● Меняем знак и длину - 2 параметра, нет возврата.
	● Как использовать разделитель в тексте вместо того, чтобы
	печатать его в консоль? 2 параметра и результат (возвращаемое
	значение).

__________________
Аргументы функции
__________________
Параметры функции
__________________

● def my_func(параметр1, параметр2, ...)
___________________
Передача параметров
___________________

● По порядку
● greeting(‘Leo’, ‘Hello’)
● По имени
● greeting(say=’Hello’, who=’Leo’)
______________________
Значения по умолчанию
______________________

● Можно указать у параметра значение по умолчанию.
● def greeting(who, say=’Hello’)
● Если мы не передадим параметр say при вызове greeting(‘Max’),
функция сработает со значением по умолчанию.

_____________
args, kwargs
_____________

● args и kwargs - это просто стандартные общепринятые названия аргументов. По факту передача нескольких 
аргументов в виде кортежа осуществляется через * и название параметра (прим. args). А передача нескольких 
аргументов в виде списка осуществляется через ** и название параметра (прим. kwargs).

● Иногда нужно реализовать передачу любого количества аргументов:

● args - передача любого количества по порядку - приходит кортеж из параметров.

def greeting(say, *args):
	print(say, args)

greeting(‘Hello’, ‘Leo’, ‘Max’, ‘Kate’, ...)

● kwargs - передача любого количества по имени - приходит словарь из параметров.
def greeting(**kwargs):
	print(kwargs)

greeting(name=‘Leo’, age=20, has_car=True ...)

_______________________
Локальные и глобальные
переменные
_______________________

● Глобальными называют объекты, объявление которых дано вне
функции. Они доступны (видимы) во всем файле, в котором
объявлены.
● Локальными называют объекты, объявление которых дано
внутри блока или функции. Эти объекты доступны только внутри
того блока, в котором объявлены.
_______
global
_______

● При желании можно изменить глобальную переменную.
● Для этого в функции нужно указать, что она глобальная.
● global my_var.

Этот механизм лучше не использовать. Мы рискуем, изменив
значение переменной в одной функции, получить неверное значение
в другой функции.
________________________
Относительность области
видимости
________________________

Тогда мы рассматриваем область видимости относительно какой либо функции:
В программе могут встречаться вложенные друг в друга функции.
● def a():
	○ def b():
		■ def c():
_________________
Передача функции
параметром,
lambda-функции
_________________
● Функция в Python это тот же объект. Ее можно записать в какую-либо переменную 
или передавать параметром в другую функцию и использовать по желанию

● Пример записи в переменную

def my_func()
	...

a = my_func

print(a())

● Пример передачи функции параметром в другую функцию

def f():
	print('Hello')

def to(f_param):
	f_param()

to(f)
lambda-функции
● lambda входные параметры: результат
● применяются для создания анонимных функций по месту их
использования

____________________
sorted, filter, map
____________________

● применяются к последовательности
● имеют параметр - функцию
● позволяют создавать код быстро и удобно

-sorted-

Например список с кортежами:
cities = [('Москва', 1000), ('Лас-Вегас', 500), ('Антверпен', 2000)]

● сортировка последовательности
● sorted(my_list, *, key=None, reverse=False)
● аргументы: 
	последовательность - cities, 
	ключ для сортировки - 
		функция:
			def func(city):
				return city[1]
		сортировка будет по численности населения из кортежа
		
		лямбда функция:
			lambda city: city[1], 
	порядок - reverse = True (или просто не указывать, если не нужен реверс)

-filter-

Например числа в кортеже:
num = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

● фильтрация последовательности
● filter(function, num)
● аргументы: 
	функция фильтрации - 
		Функция:
			def is_even(number):
				return number % 2 == 0
		Lambda функция:
			lambda number: number % 2 == 0, 
	последовательность - num

a = filter(is_even, num)

print(a)
print(list(a)) - что бы увидеть результат, его нужно привести к списку

-map-

Например числа в списке:
num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

● применение функции к каждому элементу последовательности
● map(func, my_func, ...)
● аргументы: функция, последовательность

Получить список квадратов чисел в списке:
	print(list(map(lambda x: x ** 2, num)))

Привести числовые значения из списка к строковому значению:
	print(list(map(lambda x: str(x), num)))
